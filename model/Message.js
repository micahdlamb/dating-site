var q = require('q')
var _ = require('underscore')

///////////////////////////////////////////////////////////////////////////////////////////////////
// Mongo Schema ///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
var	mongoose = require('mongoose')
var Schema   = mongoose.Schema
var ObjectId = Schema.Types.ObjectId
var Oid      = mongoose.Types.ObjectId

var Message = new Schema({
	from: {
		type: ObjectId
		,ref: 'User'
	}
	,to: {
		type: ObjectId
		,ref: 'User'
	}
	,text: {
		type: String
	}
	,time: {
		type: Date
	}
})

function transform(doc, ret, options){
  if (ret.from) ret.from = ['->', 'User', ret.from]
  if (ret.to)   ret.to   = ['->', 'User', ret.to  ]
}

Message.set('toObject', {getters: true, virtuals: true, transform: transform})
Message.set('toJSON',   {getters: true, virtuals: true, transform: transform})

///////////////////////////////////////////////////////////////////////////////////////////////////
// Mongoose hooks /////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////


Message.pre('save', function(next) {
  this.wasNew = this.isNew
	this.time = new Date
  next()
})

Message.post('save', function() {

  var User = require('./User')
  if (this.wasNew){
    if (this.to){
      User.emitTo(this.from, 'message-created', this)
      User.emitTo(this.to,   'message-created', this)
    }
    else
      User.emitToAll('message-broadcasted', this)
  }
})

///////////////////////////////////////////////////////////////////////////////////////////////////
// virtual Properties /////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
Message.virtual('_type').get(function() { return 'Message' })

///////////////////////////////////////////////////////////////////////////////////////////////////
// Methods ////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
Message.statics.getAllBroadcasted = function(){
	var defer = q.defer()
	
	this.model('Message').find({})
	.sort('time')
  .lean()
	.exec(function(err, messages){
		if (err) return defer.reject(err)
		defer.resolve(messages)
	})
	
	return defer.promise
}

///////////////////////////////////////////////////////////////////////////////////////////////////
module.exports = mongoose.model('Message', Message)